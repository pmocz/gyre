! Module  : mesa_file_m
! Purpose : read MESA files
!
! Copyright 2013-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module mesa_file_m

   ! Uses

   use forum_m, only: RD

   use constants_m
   use evol_model_m
   use math_m
   use model_m
   use model_par_m
   use model_util_m
   use util_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Parameters

   integer, parameter :: N_COLS_V0_01 = 18
   integer, parameter :: N_COLS_V0_19 = 18
   integer, parameter :: N_COLS_V1_0X = 18
   integer, parameter :: N_COLS_V1_20 = 19

   ! Access specifiers

   public :: read_mesa_model
   public :: init_mesa_model

   ! Default access

   private

contains

   subroutine read_mesa_model(ml_p, ml)

      type(model_par_t), intent(in)        :: ml_p
      class(model_t), pointer, intent(out) :: ml

      integer                     :: unit
      integer                     :: n
      real(RD)                    :: global_data(3)
      integer                     :: version
      integer                     :: n_cols
      real(RD), allocatable       :: point_data(:,:)
      integer                     :: k
      integer                     :: k_chk
      type(evol_model_t), pointer :: em

      ! Read data from the MESA-format file

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Reading from MESA file'
100      format(A)
         write(OUTPUT_UNIT, 110) 'File name', TRIM(ml_p%file)
110      format(3X,A,1X,A)
      endif

      open(NEWUNIT=unit, FILE=ml_p%file, STATUS='OLD')

      ! Read the header and determine the version

      read(unit, *) n, global_data, version

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 120) 'File version', version/100._RD
120      format(3X,A,1X,F4.2,1X,A)
      endif

      ! Read the data

      select case (version)
      case (1)
         backspace(unit)
         n_cols = N_COLS_V0_01
      case (19)
         n_cols = N_COLS_V0_19
      case (100,101)
         n_cols = N_COLS_V1_0X
      case (120)
         n_cols = N_COLS_V1_20
      case default
         @:ABORT('Unrecognized MESA file version')
      end select

      allocate(point_data(n_cols,n))

      read_loop : do k = 1,n
         read(unit, *) k_chk, point_data(:,k)
         @:ASSERT(k == k_chk, 'index mismatch')
      end do read_loop

      close(unit)

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 130) 'Read', n, 'points'
130      format(3X,A,1X,I0,1X,A)
      endif

      ! Initialize the model

      call init_mesa_model(ml_p, global_data, point_data, version, em)

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, *)
      endif

      ! Return the pointer to the model

      ml => em

      ! Finish

      return

   end subroutine read_mesa_model

   !****

   subroutine init_mesa_model(ml_p, global_data, point_data, version, em)

      type(model_par_t), intent(in)            :: ml_p
      real(RD), intent(in)                     :: global_data(:)
      real(RD), intent(in)                     :: point_data(:,:)
      integer, intent(in)                      :: version
      type(evol_model_t), pointer, intent(out) :: em

      real(RD)                    :: M_star
      real(RD)                    :: R_star
      real(RD)                    :: L_star
      integer                     :: n
      real(RD), allocatable       :: r(:)
      real(RD), allocatable       :: M_r(:)
      real(RD), allocatable       :: L_r(:)
      real(RD), allocatable       :: P(:)
      real(RD), allocatable       :: rho(:)
      real(RD), allocatable       :: T(:)
      real(RD), allocatable       :: N2(:)
      real(RD), allocatable       :: Gamma_1(:)
      real(RD), allocatable       :: nabla_ad(:)
      real(RD), allocatable       :: ups_T(:)
      real(RD), allocatable       :: nabla(:)
      real(RD), allocatable       :: eps(:)
      real(RD), allocatable       :: eps_rho(:)
      real(RD), allocatable       :: eps_T(:)
      real(RD), allocatable       :: eps_grav(:)
      real(RD), allocatable       :: kap(:)
      real(RD), allocatable       :: kap_rho(:)
      real(RD), allocatable       :: kap_T(:)
      real(RD), allocatable       :: Omega_rot(:)
      real(RD), allocatable       :: x(:)
      real(RD), allocatable       :: V_2(:)
      real(RD), allocatable       :: As(:)
      real(RD), allocatable       :: U(:)
      real(RD), allocatable       :: c_1(:)
      real(RD), allocatable       :: beta_rad(:)
      real(RD), allocatable       :: c_P(:)
      real(RD), allocatable       :: c_lum(:)
      real(RD), allocatable       :: c_rad(:)
      real(RD), allocatable       :: c_thn(:)
      real(RD), allocatable       :: c_thk(:)
      real(RD), allocatable       :: c_eps(:)
      real(RD), allocatable       :: c_egv(:)

      ! Extract data from the global and point arrays

      M_star = global_data(1)
      R_star = global_data(2)
      L_star = global_data(3)

      n = SIZE(point_data, 2)

      select case (version)
      case (1)
         call extract_data_v0_01_()
      case (19)
         call extract_data_v0_19_()
      case (100,101)
         call extract_data_v1_0X_()
      case (120)
         call extract_data_v1_20_()
      case default
         @:ABORT('unrecognized MESA memory version')
      end select

      ! Snap grid points

      x = r/R_star

      call snap_points(MAX(ml_p%dx_snap, EPSILON(0._RD)), x, M_r)

      ! Calculate dimensionless structure data

      allocate(V_2(n))
      allocate(As(n))
      allocate(U(n))
      allocate(c_1(n))
      allocate(c_lum(n))

      where (x /= 0._RD)
         V_2 = G_GRAVITY*M_r*rho/(P*r*x**2)
         As = r**3*N2/(G_GRAVITY*M_r)
         U = 4._RD*PI*rho*r**3/M_r
         c_1 = (r/R_star)**3/(M_r/M_star)
         c_lum = (L_r/L_star)/x**3
      elsewhere
         V_2 = 4._RD*PI*G_GRAVITY*rho(1)**2*R_star**2/(3._RD*P(1))
         As = 0._RD
         U = 3._RD
         c_1 = 3._RD*(M_star/R_star**3)/(4._RD*PI*rho)
         c_lum = 4._RD*PI*rho(1)*eps(1)*R_star**3/L_star
      end where

      beta_rad = A_RADIATION*T**4/(3._RD*P)

      c_P = P*ups_T/(rho*T*nabla_ad)

      c_rad = 16._RD*PI*A_RADIATION*C_LIGHT*T**4*R_star*nabla*V_2/(3._RD*kap*rho*L_star)
      c_thn = c_P*sqrt(G_GRAVITY*M_star/R_star**3)/(A_RADIATION*C_LIGHT*kap*T**3)
      c_thk = 4._RD*PI*rho*T*c_P*sqrt(G_GRAVITY*M_star/R_star**3)*R_star**3/L_star

      allocate(c_egv(n))

      select case (version)
      case (101)
         c_eps = 4._RD*PI*rho*eps*R_star**3/L_star
         c_egv = 0._RD
      case (120)
         c_eps = 4._RD*PI*rho*eps*R_star**3/L_star
         c_egv = 4._RD*PI*rho*eps_grav*R_star**3/L_star
      case default
         ! Note: technically incorrect because eps in versions < 1.01 includes eps_grav
         c_eps = 4._RD*PI*rho*eps*R_star**3/L_star
         c_egv = 0._RD
      end select

      Omega_rot = Omega_rot*sqrt(R_star**3/(G_GRAVITY*M_star))

      ! Initialize the evol_model_t

      allocate(em, SOURCE=evol_model_t(x, M_star, R_star, L_star, ml_p))

      call em%define(I_V_2, V_2)
      call em%define(I_AS, As)
      call em%define(I_U, U)
      call em%define(I_C_1, c_1)

      call em%define(I_GAMMA_1, Gamma_1)
      call em%define(I_UPS_T, ups_T)
      call em%define(I_NABLA_AD, nabla_ad)
      call em%define(I_NABLA, nabla)
      call em%define(I_BETA_RAD, beta_rad)

      call em%define(I_C_LUM, c_lum)
      call em%define(I_C_RAD, c_rad)
      call em%define(I_C_THN, c_thn)
      call em%define(I_C_THK, c_thk)
      call em%define(I_C_EPS, c_eps)
      call em%define(I_C_EGV, c_egv)

      call em%define(I_EPS_RHO, eps_rho)
      call em%define(I_EPS_T, eps_T)

      call em%define(I_KAP_RHO, kap_rho)
      call em%define(I_KAP_T, kap_T)

      call em%define(I_OMEGA_ROT, Omega_rot)

      call em%commit()

      ! Finish

      return

   contains

      subroutine extract_data_v0_01_()

         real(RD), allocatable :: eps_eps_rho(:)
         real(RD), allocatable :: eps_eps_T(:)
         integer               :: k

         @:CHECK_BOUNDS(SIZE(point_data, 1), N_COLS_V0_01)

         ! Extract data from the version-0.01 point array

         r = point_data(1,:)
         M_r = point_data(2,:)/(1._RD+point_data(2,:))*M_star
         L_r = point_data(3,:)
         P = point_data(4,:)
         T = point_data(5,:)
         rho = point_data(6,:)
         nabla = point_data(7,:)
         N2 = point_data(8,:)
         Gamma_1 = point_data(12,:)*point_data(10,:)/point_data(9,:)
         ups_T = point_data(11,:)/point_data(12,:)
         kap = point_data(13,:)
         kap_T = point_data(14,:)
         kap_rho = point_data(15,:)
         eps = point_data(16,:)
         eps_eps_T = point_data(17,:)
         eps_eps_rho = point_data(18,:)

         nabla_ad = p*ups_T/(rho*T*point_data(10,:))

         allocate(Omega_rot(n))
         Omega_rot = 0._RD

         ! Evaluate eps_rho and eps_T from eps_eps_*

         k = MAXLOC(abs(eps_eps_T), DIM=1)

         if (abs(eps_eps_T(k)) >= 1E-3_RD*abs(eps(k))) then

            ! Note: technically incorrect because eps in versions < 1.01 includes eps_grav

            eps_rho = eps_eps_rho/eps
            eps_T = eps_eps_T/eps

            if(check_log_level('INFO')) then
               write(OUTPUT_UNIT, 120) 'Rescaled epsilon derivatives'
120            format(3X,A)
            endif

         else

            eps_rho = eps_eps_rho
            eps_T = eps_eps_T

         endif

         ! Finish

         return

      end subroutine extract_data_v0_01_

      subroutine extract_data_v0_19_()

         real(RD), allocatable :: eps_eps_rho(:)
         real(RD), allocatable :: eps_eps_T(:)

         @:CHECK_BOUNDS(SIZE(point_data, 1), N_COLS_V0_19)

         ! Extract data from the version-0.19 point array

         r = point_data(1,:)
         M_r = point_data(2,:)/(1._RD+point_data(2,:))*M_star
         L_r = point_data(3,:)
         P = point_data(4,:)
         T = point_data(5,:)
         rho = point_data(6,:)
         nabla = point_data(7,:)
         N2 = point_data(8,:)
         Gamma_1 = point_data(9,:)
         nabla_ad = point_data(10,:)
         ups_T = point_data(11,:)
         kap = point_data(12,:)
         kap_T = point_data(13,:)
         kap_rho = point_data(14,:)
         eps = point_data(15,:)
         eps_eps_T = point_data(16,:)
         eps_eps_rho = point_data(17,:)
         Omega_rot = point_data(18,:)

         ! Note: technically incorrect because eps in versions < 1.01 includes eps_grav

         allocate(eps_rho(n))
         allocate(eps_T(n))

         where (eps /= 0._RD)
            eps_rho = eps_eps_rho/eps
            eps_T = eps_eps_T/eps
         elsewhere
            eps_rho = 0._RD
            eps_T = 0._RD
         end where

         ! Finish

         return

      end subroutine extract_data_v0_19_

      subroutine extract_data_v1_0X_()

         real(RD), allocatable :: eps_eps_rho(:)
         real(RD), allocatable :: eps_eps_T(:)
         real(RD), allocatable :: kap_kap_T(:)
         real(RD), allocatable :: kap_kap_rho(:)

         @:CHECK_BOUNDS(SIZE(point_data, 1), N_COLS_V1_0X)

         ! Extract data from the version-1.0X point array

         r = point_data(1,:)
         M_r = point_data(2,:)
         L_r = point_data(3,:)
         P = point_data(4,:)
         T = point_data(5,:)
         rho = point_data(6,:)
         nabla = point_data(7,:)
         N2 = point_data(8,:)
         Gamma_1 = point_data(9,:)
         nabla_ad = point_data(10,:)
         ups_T = point_data(11,:)
         kap = point_data(12,:)
         kap_kap_T = point_data(13,:)
         kap_kap_rho = point_data(14,:)
         eps = point_data(15,:)
         eps_eps_T = point_data(16,:)
         eps_eps_rho = point_data(17,:)
         Omega_rot = point_data(18,:)

         ! Note: technically incorrect in version 1.00, because eps in versions < 1.01 includes eps_grav

         allocate(eps_rho(n))
         allocate(eps_T(n))

         where (eps /= 0._RD)
            eps_rho = eps_eps_rho/eps
            eps_T = eps_eps_T/eps
         elsewhere
            eps_rho = 0._RD
            eps_T = 0._RD
         end where

         kap_T = kap_kap_T/kap
         kap_rho = kap_kap_rho/kap

         ! Finish

         return

      end subroutine extract_data_v1_0X_

      subroutine extract_data_v1_20_()

         real(RD), allocatable :: eps_eps_rho(:)
         real(RD), allocatable :: eps_eps_T(:)
         real(RD), allocatable :: kap_kap_T(:)
         real(RD), allocatable :: kap_kap_rho(:)

         @:CHECK_BOUNDS(SIZE(point_data, 1), N_COLS_V1_20)

         ! Extract data from the version-1.0X point array

         r = point_data(1,:)
         M_r = point_data(2,:)
         L_r = point_data(3,:)
         P = point_data(4,:)
         T = point_data(5,:)
         rho = point_data(6,:)
         nabla = point_data(7,:)
         N2 = point_data(8,:)
         Gamma_1 = point_data(9,:)
         nabla_ad = point_data(10,:)
         ups_T = point_data(11,:)
         kap = point_data(12,:)
         kap_kap_T = point_data(13,:)
         kap_kap_rho = point_data(14,:)
         eps = point_data(15,:)
         eps_eps_T = point_data(16,:)
         eps_eps_rho = point_data(17,:)
         eps_grav = point_data(18,:)
         Omega_rot = point_data(19,:)

         allocate(eps_rho(n))
         allocate(eps_T(n))

         where (eps /= 0._RD)
            eps_rho = eps_eps_rho/eps
            eps_T = eps_eps_T/eps
         elsewhere
            eps_rho = 0._RD
            eps_T = 0._RD
         end where

         kap_T = kap_kap_T/kap
         kap_rho = kap_kap_rho/kap

         ! Finish

         return

      end subroutine extract_data_v1_20_

   end subroutine init_mesa_model

end module mesa_file_m
