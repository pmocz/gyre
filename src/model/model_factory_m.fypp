! Module  : model_factory_m
! Purpose : factory procedures for model_t
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module model_factory_m

   ! Uses

   use forum_m, only: RD

   use anapoly_0_model_m
   use anapoly_1_model_m
   use anapoly_5_model_m
   use anapoly_5_1_model_m
   use hom_model_m
   use model_m
   use model_par_m

   use amdl_file_m
   use famdl_file_m
   use fgong_file_m
   use losc_file_m
   use mesa_file_m
   use parfait_file_m
   use parfaitd_file_m
   use osc_file_m
   use wdec_file_m
   use b3_file_m
   use gsm_file_m
   use poly_file_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Interfaces

   interface model_t
      module procedure model_t_
   end interface model_t

   ! Access specifiers

   public :: model_t

   ! Default access

   private

contains

   function model_t_(ml_p) result(ml)


      type(model_par_t), intent(in) :: ml_p
      class(model_t), pointer       :: ml

      ! Construct the model_t

      select case (ml_p%model_type)
      case ('EVOL')

         select case (ml_p%file_format)
         case ('AMDL')
            call read_amdl_model(ml_p, ml)
         case ('B3')
            call read_b3_model(ml_p, ml)
         case ('FAMDL')
            call read_famdl_model(ml_p, ml)
         case ('FGONG')
            call read_fgong_model(ml_p, ml)
         case ('GSM')
            call read_gsm_model(ml_p, ml)
         case ('LOSC')
            call read_losc_model(ml_p, ml)
         case ('MESA')
            call read_mesa_model(ml_p, ml)
         case ('OSC')
            call read_osc_model(ml_p, ml)
         case ('WDEC')
            call read_wdec_model(ml_p, ml)
         case default
            @:ABORT('invalid file_format')
         end select

      case ('POLY')

         call read_poly_model(ml_p, ml)

      case ('PARFAIT')

         call read_parfait_model(ml_p, ml)

      case ('PARFAITD')

         call read_parfaitd_model(ml_p, ml)

      case ('HOM')

         allocate(ml, SOURCE=hom_model_t(ml_p))

      case ('ANAPOLY_0')

         allocate(ml, SOURCE=anapoly_0_model_t(ml_p))

      case ('ANAPOLY_1')

         allocate(ml, SOURCE=anapoly_1_model_t(ml_p))

      case ('ANAPOLY_5')

         allocate(ml, SOURCE=anapoly_5_model_t(ml_p))

      case ('ANAPOLY_5_1')

         allocate(ml, SOURCE=anapoly_5_1_model_t(ml_p))

      case default

         @:ABORT('invalid model_type')

      end select

      ! Finish

      return

   end function model_t_

end module model_factory_m
