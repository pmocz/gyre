! Module  : poly_file_m
! Purpose : read POLY files
!
! Copyright 2013-2022 Rich Townsend & The MESA Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module poly_file_m

   ! Uses

   use forum_m, only: RD, hdf5io_t, OPEN_FILE_RO

   use constants_m
   use evol_model_m
   use grid_m
   use model_m
   use model_par_m
   use poly_model_m
   use util_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   public :: read_poly_model

   ! Default access

   private

contains

   subroutine read_poly_model(ml_p, ml)

      type(model_par_t), intent(in)        :: ml_p
      class(model_t), pointer, intent(out) :: ml

      type(hdf5io_t)              :: hi
      real(RD), allocatable       :: n_poly(:)
      integer                     :: n_r
      real(RD), allocatable       :: Delta_b(:)
      real(RD)                    :: Gamma_1
      real(RD), allocatable       :: z(:)
      real(RD), allocatable       :: theta(:)
      real(RD), allocatable       :: theta_pri(:)
      real(RD)                    :: Omega_rot
      type(poly_model_t), pointer :: pm

      ! Read the POLY-format file

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Reading from POLY file', TRIM(ml_p%file)
100      format(A,1X,A)
      endif

      hi = hdf5io_t(ml_p%file, OPEN_FILE_RO)

      call hi%read_attr('n_r', n_r)

      call hi%alloc_read_attr('n_poly', n_poly)
      if (n_r > 1) then
         call hi%alloc_read_attr('Delta_b', Delta_b)
      else
         allocate(Delta_b(0))
      endif
      call hi%read_attr('Gamma_1', Gamma_1)

      call hi%alloc_read_dset('z', z)
      call hi%alloc_read_dset('theta', theta)
      call hi%alloc_read_dset('dtheta', theta_pri)

      call hi%final()

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 110) 'Read', SIZE(z), 'points'
110      format(3X,A,1X,I0,1X,A)
      endif

      ! Set up Omega_rot

      Omega_rot = 0._RD

      ! Initialize the poly_model_t

      allocate(pm, SOURCE=poly_model_t(z, theta, theta_pri, n_poly, Delta_b, Gamma_1, Omega_rot, &
               ml_p%interp_type, ml_p%constrain_derivs))

      ! Return a pointer

      ml => pm

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, *)
      endif

      ! Finish

      return

   end subroutine read_poly_model

end module poly_file_m
