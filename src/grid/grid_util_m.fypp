! Module  : grid_util_m
! Purpose : grid utilities
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module grid_util_m

   ! Uses

   use forum_m, only: RD

   use context_m
   use grid_m
   use model_m
   use num_par_m
   use osc_par_m
   use point_m
   use root_m
   use rot_m
   use state_m
   use status_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Access specifiers

   public :: find_turn

   ! Default access

   private

contains

   subroutine find_turn(cx, gr, st, nm_p, os_p, j_turn, x_turn)

      type(context_t), target, intent(in) :: cx
      type(grid_t), intent(in)            :: gr
      class(state_rt), target, intent(in) :: st
      type(num_par_t), intent(in)         :: nm_p
      type(osc_par_t), intent(in)         :: os_p
      integer, intent(out)                :: j_turn
      real(RD), intent(out)               :: x_turn

      real(RD)      :: gamma_a
      real(RD)      :: gamma_b
      integer       :: j
      type(point_t) :: pt_a
      type(point_t) :: pt_b
      integer       :: stat

      @:ASSERT_DEBUG(cx%point_i() == gr%pt_i(), 'context and grid are not conformable')
      @:ASSERT_DEBUG(cx%point_o() == gr%pt_o(), 'context and grid are not conformable')

      ! Find the cell index and abscissa (in grid gr) of the inner
      ! turning point, where the local solution for state st first
      ! becomes propagative

      j_turn = gr%n
      x_turn = HUGE(0._RD)

      gamma_b = gamma_(cx, cx%point_i(), st, os_p%alpha_gam, os_p%alpha_pi)

      if (gamma_b <= 0._RD) then

         ! Inner point is already propagative

         associate (pt_i => cx%point_i())
            j_turn = 1
            x_turn = pt_i%x
         end associate

      else

         turn_loop : do j = 1, gr%n-1

            ! Check for a sign change in gamma

            gamma_a = gamma_b
            gamma_b = gamma_(cx, gr%pt(j+1), st, os_p%alpha_gam, os_p%alpha_pi)

            if (gamma_a > 0._RD .AND. gamma_b <= 0._RD) then

               j_turn = j

               pt_a = gr%pt(j)
               pt_b = gr%pt(j+1)

               if (pt_a%s == pt_b%s) then

                  if (abs(gamma_a) < EPSILON(0._RD)*abs(gamma_b)) then

                     x_turn = pt_a%x

                  elseif (abs(gamma_b) < EPSILON(0._RD)*abs(gamma_a)) then

                     x_turn = pt_b%x

                  else

                     call solve_root(eval_gamma_, pt_a%x, pt_b%x, 0._RD, nm_p, x_turn, stat)

                  endif

               else

                  x_turn = pt_a%x

               end if

               exit turn_loop

            endif

         end do turn_loop

      endif

      ! Finish

      return

   contains

      subroutine eval_gamma_(x, gamma, stat)

         real(RD), intent(in)  :: x
         real(RD), intent(out) :: gamma
         integer, intent(out)  :: stat

         ! Evaluate gamma

         gamma = gamma_(cx, point_t(pt_a%s, x), st, os_p%alpha_gam, os_p%alpha_pi)

         stat = STAT_OK

         ! Finish

      end subroutine eval_gamma_

   end subroutine find_turn

   !****

   function gamma_(cx, pt, st, alpha_gam, alpha_pi) result(gamma)

      type(context_t), intent(in) :: cx
      type(point_t), intent(in)   :: pt
      class(state_rt), intent(in) :: st
      real(RD), intent(in)        :: alpha_gam
      real(RD), intent(in)        :: alpha_pi
      real(RD)                    :: gamma

      real(RD) :: V
      real(RD) :: As
      real(RD) :: U
      real(RD) :: c_1
      real(RD) :: Gamma_1
      real(RD) :: Omega_rot
      real(RD) :: omega_c
      real(RD) :: lambda
      real(RD) :: g_4
      real(RD) :: g_2
      real(RD) :: g_0

      ! Calculate the propagation discriminant gamma (< 0 : propagation,
      ! > 0 : evanescence)

      associate (ml => cx%model())

         if (ml%is_vacuum(pt)) then

            gamma = HUGE(0._RD)

         else

            V = ml%coeff(I_V_2, pt)*pt%x**2
            As = ml%coeff(I_As, pt)
            U = ml%coeff(I_U, pt)
            c_1 = ml%coeff(I_C_1, pt)
            Gamma_1 = ml%coeff(I_GAMMA_1, pt)

            Omega_rot = cx%Omega_rot(pt)

            omega_c = cx%omega_c(Omega_rot, st)

            lambda = cx%lambda(Omega_rot, st)

            g_4 = -4._RD*V/Gamma_1*c_1*alpha_gam
            g_2 = (As - V/Gamma_1 - U + 4._RD)**2 + 4._RD*V/Gamma_1*As*alpha_gam*alpha_pi + 4._RD*lambda
            g_0 = -4._RD*lambda*As/c_1*alpha_pi

            if (g_0 /= 0._RD) then
               gamma = (g_4*omega_c**4 + g_2*omega_c**2 + g_0)/omega_c**2
            else
               gamma = g_4*omega_c**2 + g_2
            endif

         endif

      end associate

      ! Finish

      return

   end function gamma_

end module grid_util_m
