! Program : build_tar_fit
! Purpose : build tar_fit_t types and write to file
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

program build_tar_fit

   ! Uses

   use forum_m
   use gyre_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: file_name
   integer, allocatable      :: m
   integer, allocatable      :: k
   real(RD), allocatable     :: tol

   type(arg_parser_t) :: arg_parser
   type(tar_fit_t)    :: tf
   type(hdf5io_t)     :: hi

   ! Parse command-line arguments

   tol = 1E-10_RD

   arg_parser = arg_parser_t('build_tar_fit FILE', auto_help=.TRUE.)

   call arg_parser%define_option('m', OPT_REQUIRED_ARG, 'm', &
      usage='--m=M', description='azimuthal order')
   call arg_parser%define_option('k', OPT_REQUIRED_ARG, 'k', &
      usage='--k=K', description='polar index')
   call arg_parser%define_option('tol', OPT_REQUIRED_ARG, &
      usage='--tol=TOL', description='chebyshev fit toerance')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. ALLOCATED(file_name)) call print_summary()

   if (.NOT. ALLOCATED(m)) then
      @:STOP('-m must be specified')
   end if

   if (.NOT. ALLOCATED(k)) then
      @:STOP('-k must be specified')
   end if

   ! Initialize

   call init_math()

   ! Construct the tar_fit_t

   tf = tar_fit_t(m, k, tol)

   ! Write it out

   hi = hdf5io_t(file_name, CREATE_FILE)
   call write(hi, tf)
   call hi%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         file_name = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      integer :: stat

      stat = STAT_OK

      select case(name)
      case('m')
         call parse_value(value, m, stat)
      case('k')
         call parse_value(value, k, stat)
      case('tol')
         call parse_value(value, tol, stat)
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

      if (stat /= STAT_OK) then
         @:STOP('invalid --'//name)
      end if

   end subroutine opt_proc

   !****

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

end program build_tar_fit
