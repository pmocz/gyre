! Program  : eval_lambda
! Purpose  : evaluate TAR eigenvalue
!
! Copyright 2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

program eval_lambda

   ! Uses

   use forum_m, only: RD, n_arg, get_arg, hdf5io_t, CREATE_FILE

   use gyre_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   integer                   :: m
   integer                   :: l
   real(RD)                  :: q_min
   real(RD)                  :: q_max
   integer                   :: n_q
   logical                   :: log_q
   logical                   :: rossby
   character(:), allocatable :: filename

   integer               :: k
   real(RD), allocatable :: q(:)
   real(RD), allocatable :: lam(:)
   integer               :: i
   type(hdf5io_t)        :: hi

   ! Read parameters

   @:ASSERT(n_arg() == 8, 'Syntax: eval_lambda l m q_min q_max n_q log_q rossby filename')

   call get_arg(1, l)
   call get_arg(2, m)
   call get_arg(3, q_min)
   call get_arg(4, q_max)
   call get_arg(5, n_q)
   call get_arg(6, log_q)
   call get_arg(7, rossby)
   call get_arg(8, filename)

   ! Initialize

   call init_math()

   ! Check arguments & set up k

   @:ASSERT(ABS(m) <= l, 'invalid m')

   if (rossby) then
      k = -(l - ABS(m) + 1)
   else
      k = l - ABS(m)
   endif

   ! Allocate arrays

   allocate(q(n_q))
   allocate(lam(n_q))

   ! Evaluate them

   if (n_q > 1) then

      !$OMP PARALLEL DO SCHEDULE (GUIDED)
      do i = 1, n_q

         if (log_q) then
            q(i) = 10**((LOG10(q_min)*(n_q-i) + LOG10(q_max)*(i-1))/(n_q-1))
         else
            q(i) = (q_min*(n_q-i) + q_max*(i-1))/(n_q-1)
         endif

         lam(i) = lambda(q(i), m, k)

      end do

   elseif (n_q == 1) then

      @:ASSERT(q_min == q_max, 'min/max values must match when n_q == 1')

      q(1) = q_min

      lam(1) = lambda(q(1), m, k)

   else

      @:ABORT('n_q must be 1 or greater')

   endif

   ! Write out results

   hi = hdf5io_t(filename, CREATE_FILE)
   call hi%write_attr('l', l)
   call hi%write_attr('m', m)
   call hi%write_attr('k', k)
   call hi%write_dset('rossby', rossby)
   call hi%write_dset('q', q)
   call hi%write_dset('lambda', lam)
   call hi%final()

   ! Finish

end program eval_lambda
