! Program : map_tar_fit
! Purpose : maps of tar_fits in the complex plane
!
! Copyright 2017-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

program map_tar_fit

   ! Uses

   use kinds_m
   use hgroup_m
   use system_m

   use constants_m
   use tar_fit_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   real(RD)                  :: q_re_min
   real(RD)                  :: q_re_max
   integer                   :: n_q_re
   real(RD)                  :: q_im_min
   real(RD)                  :: q_im_max
   integer                   :: n_q_im
   character(:), allocatable :: in_file
   character(:), allocatable :: out_file

   type(hgroup_t)           :: hg
   type(tar_fit_t)          :: tf
   integer                  :: i
   integer                  :: j
   real(RD), allocatable    :: q_re(:)
   real(RD), allocatable    :: q_im(:)
   complex(RD)              :: q
   complex(RD), allocatable :: lambda(:,:)

   ! Read parameters

   @:ASSERT(n_arg() == 8, 'Syntax: map_tar_fit q_re_min q_re_max n_q_re q_im_min q_im_max n_q_im in_file out_file')

   call get_arg(1, q_re_min)
   call get_arg(2, q_re_max)
   call get_arg(3, n_q_re)
   call get_arg(4, q_im_min)
   call get_arg(5, q_im_max)
   call get_arg(6, n_q_im)
   call get_arg(7, in_file)
   call get_arg(8, out_file)

   ! Read the tar_fit_t

   hg = hgroup_t(in_file, OPEN_FILE_RO)
   call read(hg, tf)
   call hg%final()

   ! Set up axes

   q_re = [((q_re_min*(n_q_re-i) + q_re_max*(i-1))/(n_q_re-1),i=1,n_q_re)]
   q_im = [((q_im_min*(n_q_im-j) + q_im_max*(j-1))/(n_q_im-1),j=1,n_q_im)]

   ! Loop over the complex plane, calculating lambda

   allocate(lambda(n_q_re,n_q_im))

   re_loop : do i = 1, n_q_re
      im_loop : do j = 1, n_q_im
         q = CMPLX(q_re(i), q_im(j), RD)
         lambda(i,j) = tf%lambda(q)
      end do im_loop
   end do re_loop

   ! Write out data

   hg = hgroup_t(out_file, CREATE_FILE)
   call write_dset(hg, 'q_re', q_re)
   call write_dset(hg, 'q_im', q_im)
   call write_dset(hg, 'lambda', lambda)
   call hg%final()

   ! Finish

end program map_tar_fit

