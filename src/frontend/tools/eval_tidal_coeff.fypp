! Program : eval_tidal_coeff
! Purpose : evaluate tidal coupling coefficients
!
! Copyright 2020-2024 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

program eval_tidal_coeff

   ! Uses

   use forum_m, only: RD, arg_parser_t, OPT_REQUIRED_ARG

   use gyre_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: coeff
   real(RD), allocatable     :: R_a
   real(RD), allocatable     :: e
   integer, allocatable      :: n
   integer, allocatable      :: l
   integer, allocatable      :: m
   integer, allocatable      :: k

   type(arg_parser_t)      :: arg_parser
   type(model_par_t)       :: ml_p
   class(model_t), pointer :: ml => null()
   type(orbit_par_t)       :: or_p
   real(RD)                :: q
   real(RD)                :: Omega_orb
   real(RD)                :: f

   ! Parse command-line arguments

   R_a = 1._RD
   e = 0._RD

   arg_parser = arg_parser_t('eval_tidal_coeff ( cbar | Gbar_{1..4} | X | X_quad | Y | Y^*)', auto_help=.TRUE.)

   call arg_parser%define_option('R/a', OPT_REQUIRED_ARG, &
      usage='--R/a=R_A', description='ratio of stellar radius to semi-major axis')
   call arg_parser%define_option('e', OPT_REQUIRED_ARG, 'e', &
      usage='--e=E', description='orbital eccentricity')
   call arg_parser%define_option('n', OPT_REQUIRED_ARG, 'n', &
      usage='--n=N', description='Hansen degree')
   call arg_parser%define_option('l', OPT_REQUIRED_ARG, 'l', &
      usage='--l=L', description='harmonic degree')
   call arg_parser%define_option('m', OPT_REQUIRED_ARG, 'm', &
      usage='--m=M', description='azimuthal order')
   call arg_parser%define_option('k', OPT_REQUIRED_ARG, 'k', &
      usage='--k=K', description='Fourier index')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. ALLOCATED(coeff)) call print_summary()

   select case(coeff)
   case ('cbar', 'G_bar_1', 'Gbar_2', 'Gbar_3', 'Gbar_4')
      if (.NOT. ALLOCATED(R_a)) then
         @:STOP('--R_a must be specified')
      end if
      if (.NOT. ALLOCATED(l)) then
         @:STOP('--l must be specified')
      end if
      if (.NOT. ALLOCATED(m)) then
         @:STOP('--m must be specified')
      end if
      if (.NOT. ALLOCATED(k)) then
         @:STOP('--k must be specified')
      end if
   case('X', 'X_quad')
      if (.NOT. ALLOCATED(n)) then
         @:STOP('--n must be specified')
      end if
      if (.NOT. ALLOCATED(m)) then
         @:STOP('--m must be specified')
      end if
      if (.NOT. ALLOCATED(k)) then
         @:STOP('--k must be specified')
      end if
   case('Y', 'Y^*')
      if (.NOT. ALLOCATED(l)) then
         @:STOP('--l must be specified')
      end if
      if (.NOT. ALLOCATED(m)) then
         @:STOP('--m must be specified')
      end if
   case default
      @:STOP('invalid coeff')
   end select

   ! Initialize

   call init_math()

   ! Set up model and orbit parameters

   ml_p = model_par_t()

   ml => model_t(ml_p)

   q = 1._RD
   Omega_orb = sqrt(R_a**3*(1._RD + q))

   or_p = orbit_par_t(Omega_orb=Omega_orb, q=q, e=e)

   ! Evaluate the coefficient

   select case (coeff)
   case ('cbar')
      f = tidal_cbar(ml, or_p, l, m, k)
   case ('Gbar_1')
      f = tidal_Gbar_1(ml, or_p, l, m, k)
   case ('Gbar_2')
      f = tidal_Gbar_2(ml, or_p, l, m, k)
   case ('Gbar_3')
      f = tidal_Gbar_3(ml, or_p, l, m, k)
   case ('Gbar_4')
      f = tidal_Gbar_4(ml, or_p, l, m, k)
   case ('X')
      f = hansen_X(or_p, n, m, k)
   case ('X_quad')
      f = hansen_X_RQ(or_p, n, m, k)
   case ('Y')
      f = REAL(spherical_Y(l, m, HALFPI, 0._RD))
   case ('Y^*')
      f = REAL(CONJG(spherical_Y(l, m, HALFPI, 0._RD)))
   end select

   print *, f

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         coeff = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      integer :: stat

      stat = STAT_OK

      select case(name)
      case('R/a')
         call parse_value(value, R_a)
      case('e')
         call parse_value(value, e)
      case('l')
         call parse_value(value, l)
      case('n')
         call parse_value(value, n)
      case('m')
         call parse_value(value, m)
      case('k')
         call parse_value(value, k)
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

      if (stat /= STAT_OK) then
         @:STOP('invalid --'//name)
      end if

   end subroutine opt_proc

   !****

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

end program eval_tidal_coeff
