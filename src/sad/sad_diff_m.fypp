! Module  : sad_diff_m
! Purpose : static adiabatic difference equations
!
! Copyright 2019-2024 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module sad_diff_m

   ! Uses

   use forum_m, only: RD

   use context_m
   use diff_factory_m
   use ext_m
   use mode_par_m
   use num_par_m
   use osc_par_m
   use point_m
   use sad_eqns_m
   use sad_match_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type, extends(diff_rt) :: sad_diff_t
      private
      class(diff_rt), allocatable :: df
   contains
      private
      procedure, public :: build
   end type sad_diff_t

   ! Interfaces

   interface sad_diff_t
      module procedure sad_diff_t_
   end interface sad_diff_t

   ! Access specifiers

   public :: sad_diff_t

   ! Default access

   private

contains

   function sad_diff_t_(cx, pt_a, pt_b, md_p, nm_p, os_p) result(df)

      type(context_t), pointer, intent(in) :: cx
      type(point_t), intent(in)            :: pt_a
      type(point_t), intent(in)            :: pt_b
      type(mode_par_t), intent(in)         :: md_p
      type(num_par_t), intent(in)          :: nm_p
      type(osc_par_t), intent(in)          :: os_p
      type(sad_diff_t)                     :: df

      type(sad_eqns_t) :: eq

      ! Construct the sad_diff_t

      if (pt_a%s == pt_b%s) then

         ! Regular subinterval; use difference equations

         eq = sad_eqns_t(cx, md_p, os_p)

         allocate(df%df, SOURCE=diff_rt(eq, pt_a, pt_b, nm_p))

      else

         ! Segment boundary; use match conditions

         allocate(df%df, SOURCE=sad_match_t(cx, pt_a, pt_b, md_p, os_p))

      endif

      df%n_e = df%df%n_e

      ! Finish

      return

   end function sad_diff_t_

   !****

   subroutine build(this, st, E_l, E_r, scl)

      class(sad_diff_t), intent(in) :: this
      class(state_rt), intent(in)   :: st
      real(RD), intent(out)         :: E_l(:,:)
      real(RD), intent(out)         :: E_r(:,:)
      type(ext_rt), intent(out)     :: scl

      @:CHECK_BOUNDS(SIZE(E_l, 1), this%n_e)
      @:CHECK_BOUNDS(SIZE(E_l, 2), this%n_e)

      @:CHECK_BOUNDS(SIZE(E_r, 1), this%n_e)
      @:CHECK_BOUNDS(SIZE(E_r, 2), this%n_e)

      ! Build the difference equations

      call this%df%build(st, E_l, E_r, scl)

      ! Finish

      return

   end subroutine build

end module sad_diff_m
