! Module  : hdf_writer_m
! Purpose : write HDF data
!
! Copyright 2013-2019 Rich Townsend
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module hdf_writer_m

   ! Uses

   use forum_m, only: RD, hdf5io_t, CREATE_FILE

   use writer_m

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type, extends (writer_t) :: hdf_writer_t
      private
      type(hdf5io_t) :: hi
      integer        :: c
   contains
      private
      procedure, public :: final
      procedure, public :: count
      #:for S in NUM_SUFFIXES+CHAR_SUFFIXES
         #:for R in (0, 1)
            procedure, public :: write_${S}$_${R}$
         #:endfor
      #:endfor
   end type hdf_writer_t

   ! Interfaces

   interface hdf_writer_t
      module procedure hdf_writer_t_
   end interface hdf_writer_t

   ! Access specifiers

   public :: hdf_writer_t

   ! Default access

   private

contains

   function hdf_writer_t_(file_name, label) result(wr)

      character(*), intent(in) :: file_name
      character(*), intent(in) :: label
      type(hdf_writer_t)       :: wr

      ! Construct the hdf_writer type

      wr%hi = hdf5io_t(file_name, CREATE_FILE)

      call wr%hi%write_attr('label', label)

      wr%c = 0

      ! Finish

      return

   end function hdf_writer_t_

   !****

   subroutine final(this)

      class(hdf_writer_t), intent(inout) :: this

      ! Finalize the hdf_writer

      call this%hi%final()

      ! Finish

      return

   end subroutine final

   !****

   function count(this)

      class(hdf_writer_t), intent(in) :: this
      integer                         :: count

      ! Return the write counter

      count = this%c

      ! Finish

      return

   end function count

   !****

   #:for T, S in zip(NUM_TYPES+CHAR_TYPES, NUM_SUFFIXES+CHAR_SUFFIXES)
      #:for R in (0, 1)

         subroutine write_${S}$_${R}$(this, name, data)

            class(hdf_writer_t), intent(inout) :: this
            character(*), intent(in)           :: name
            ${T}$, intent(in)                  :: data${ARRAY_SPEC(R)}$

            ! Write the data

            #:if R > 0
               call this%hi%write_dset(name, data)
            #:else
               call this%hi%write_attr(name, data)
            #:endif

            this%c = this%c + 1

            ! Finish

            return

         end subroutine write_${S}$_${R}$

      #:endfor
   #:endfor

end module hdf_writer_m
