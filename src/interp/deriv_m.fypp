! Module  : deriv_m
! Purpose : derivative evaluation functions
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module deriv_m

   ! Uses

   use forum_m, only: RD

   use blas_lapack_m
   use math_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Interfaces

   #:for S in FLOAT_SUFFIXES

      interface deriv
         module procedure deriv_${S}$_
      end interface deriv

   #:endfor

   ! Access specifiers

   public :: deriv

   ! Default access

   private

contains

   #:for T, S in zip(FLOAT_TYPES, FLOAT_SUFFIXES)

      function deriv_${S}$_(x, f, deriv_type, df_dx_a, df_dx_b) result(df_dx)

         real(RD), intent(in)        :: x(:)
         ${T}$, intent(in)           :: f(:)
         character(*), intent(in)    :: deriv_type
         ${T}$, optional, intent(in) :: df_dx_a
         ${T}$, optional, intent(in) :: df_dx_b
         ${T}$                       :: df_dx(SIZE(x))

         ! Evaluate the derivative df/dx

         select case (deriv_type)
         case ('SPLINE')
            df_dx = deriv_spline_${S}$_(x, f, df_dx_a, df_dx_b)
         case('FINDIFF')
            df_dx = deriv_findiff_${S}$_(x, f, df_dx_a, df_dx_b)
         #:if T == 'real(RD)'
            case('MONO')
               df_dx = deriv_mono_${S}$_(x, f, df_dx_a, df_dx_b)
         #:endif
         case default
            @:ABORT('invalid deriv_type')
         end select

         ! Finish

         return

      end function deriv_${S}$_

      !****

      function deriv_spline_${S}$_(x, f, df_dx_a, df_dx_b) result(df_dx)

         real(RD), intent(in)        :: x(:)
         ${T}$, intent(in)           :: f(:)
         ${T}$, intent(in), optional :: df_dx_a
         ${T}$, intent(in), optional :: df_dx_b
         ${T}$                       :: df_dx(SIZE(x))

         integer  :: n
         ${T}$ :: h(SIZE(x)-1)
         ${T}$ :: L(SIZE(x)-1)
         ${T}$ :: D(SIZE(x))
         ${T}$ :: U(SIZE(x)-1)
         ${T}$ :: B(SIZE(x),1)
         integer  :: info

         @:ASSERT_DEBUG(SIZE(x) > 1, 'array too shaort')

         @:CHECK_BOUNDS(SIZE(f), SIZE(x))

         ! Calcualte the first derivatives for a cubic spline interp
         ! (ensuring the second derivatives are continuous)

         n = SIZE(x)

         h = x(2:) - x(:n-1)

         ! Set up the tridiagonal matrix and RHS

         ! Inner boundary

         D(1) = 1._RD
         U(1) = 0._RD

         if (PRESENT(df_dx_a)) then
            B(1,1) = df_dx_a
         else
            B(1,1) = (f(2) - f(1))/h(1)
         endif

         ! Internal points

         L(1:n-2) = 2._RD/h(1:n-2)
         D(2:n-1) = 4._RD/h(1:n-2) + 4._RD/h(2:n-1)
         U(2:n-1) = 2._RD/h(2:n-1)

         B(2:n-1,1) = -6._RD*f(1:n-2)/h(1:n-2)**2 + 6._RD*f(2:n-1)/h(1:n-2)**2 + &
            6._RD*f(3:n  )/h(2:n-1)**2 - 6._RD*f(2:n-1)/h(2:n-1)**2

         ! Outer boundary

         L(n-1) = 0._RD
         D(n) = 1._RD

         if (PRESENT(df_dx_b)) then
            B(n,1) = df_dx_b
         else
            B(n,1) = (f(n) - f(n-1))/h(n-1)
         endif

         ! Solve the tridiagonal system

         call XGTSV(n, 1, L, D, U, B, SIZE(B, 1), info)
         @:ASSERT(info == 0, 'non-zero return from XTGSV')

         df_dx = B(:,1)

         ! Finish

         return

      end function deriv_spline_${S}$_

      !****

      function deriv_findiff_${S}$_(x, f, df_dx_a, df_dx_b) result(df_dx)

         real(RD), intent(in)        :: x(:)
         ${T}$, intent(in)           :: f(:)
         ${T}$, intent(in), optional :: df_dx_a
         ${T}$, intent(in), optional :: df_dx_b
         ${T}$                       :: df_dx(SIZE(x))

         integer  :: n
         real(RD) :: h(SIZE(x)-1)
         ${T}$ :: s(SIZE(x)-1)

         @:ASSERT_DEBUG(SIZE(x) > 1, 'array too short')

         @:CHECK_BOUNDS(SIZE(f), SIZE(x))

         ! Calculate the first derivatives via centered finite differences

         n = SIZE(x)

         h = x(2:) - x(:n-1)

         s = (f(2:) - f(:n-1))/h

         if (PRESENT(df_dx_a)) then
            df_dx(1) = df_dx_a
         else
            df_dx(1) = s(1)
         endif

         df_dx(2:n-1) = 0.5_RD*(s(1:n-2) + s(2:n-1))

         if (PRESENT(df_dx_b)) then
            df_dx(n) = df_dx_b
         else
            df_dx(n) = s(n-1)
         endif

         ! Finish

         return

      end function deriv_findiff_${S}$_

   #:endfor

   !****

   function deriv_mono_r_(x, f, df_dx_a, df_dx_b) result(df_dx)

      real(RD), intent(in)           :: x(:)
      real(RD), intent(in)           :: f(:)
      real(RD), intent(in), optional :: df_dx_a
      real(RD), intent(in), optional :: df_dx_b
      real(RD)                       :: df_dx(SIZE(x))

      integer  :: n
      real(RD) :: h(SIZE(x)-1)
      real(RD) :: s(SIZE(x)-1)
      real(RD) :: p(SIZE(x))
      integer  :: i

      @:ASSERT_DEBUG(SIZE(x) > 1, 'array too short')

      @:CHECK_BOUNDS(SIZE(f), SIZE(x))

      ! Calculate the first derivatives using the Steffen (1990, A&A,
      ! 239, 443) monontonicity preserving algorithm

      n = SIZE(x)

      h = x(2:) - x(:n-1)

      s = (f(2:) - f(:n-1))/h

      ! Calculate parabolic gradients

      if (PRESENT(df_dx_a)) then
         p(1) = df_dx_a
      else
         p(1) = s(1)
      endif

      p(2:n-1) = (s(1:n-2)*h(2:n-1) + s(2:n-1)*h(1:n-2))/(h(1:n-2) + h(2:n-1))

      if (PRESENT(df_dx_b)) then
         p(n) = df_dx_b
      else
         p(n) = s(n-1)
      endif

      ! Calculate monotonic gradients

      df_dx(1) = p(1)

      do i = 2,n-1
         df_dx(i) = (SIGN(1._RD, s(i-1)) + SIGN(1._RD, s(i)))* &
            MIN(abs(s(i-1)), abs(s(i)), 0.5_RD*abs(p(i)))
      end do

      df_dx(n) = p(n)

      ! Finish

      return

   end function deriv_mono_r_

end module deriv_m
