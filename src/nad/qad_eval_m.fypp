! Module  : qad_eval_m
! Purpose : quasiadiabatic eigenfunction evaluation
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module qad_eval_m

   ! Uses

   use forum_m, only: RD

   use context_m
   use deriv_m
   use ext_m
   use grid_m
   use model_m
   use mode_par_m
   use nad_eqns_m
   use osc_par_m
   use point_m
   use state_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: qad_eval_t
      private
      type(context_t), pointer :: cx => null()
      type(nad_eqns_t)         :: eq
      type(grid_t)             :: gr
      integer, public          :: n
   contains
      private
      procedure, public :: y_qad
   end type qad_eval_t

   ! Interfaces

   interface qad_eval_t
      module procedure qad_eval_t_
   end interface qad_eval_t

   ! Access specifiers

   public :: qad_eval_t

   ! Default access

   private

contains

   function qad_eval_t_(cx, gr, md_p, os_p) result(qe)

      type(context_t), pointer, intent(in) :: cx
      type(grid_t), intent(in)             :: gr
      type(mode_par_t), intent(in)         :: md_p
      type(osc_par_t), intent(in)          :: os_p
      type(qad_eval_t)                     :: qe

      ! Construct the qad_eval_t

      ! Initialize the equations

      qe%eq = nad_eqns_t(cx, md_p, os_p)
      call qe%eq%stencil(gr%pt)

      ! Other initializations

      qe%cx => cx
      qe%gr = gr

      qe%n = gr%n

      ! Finish

      return

   end function qad_eval_t_

   !****

   function y_qad(this, st, y_ad)

      class(qad_eval_t), intent(inout) :: this
      class(state_ct), intent(in)      :: st
      real(RD), intent(in)             :: y_ad(:,:)
      complex(RD)                      :: y_qad(6,this%n)

      integer         :: j
      integer         :: s
      complex(RD)     :: xA(6,6)
      complex(RD)     :: xA_5(6,this%n)
      complex(RD)     :: xA_6(6,this%n)
      complex(RD)     :: dy_6(this%n)

      @:CHECK_BOUNDS(SIZE(y_ad, 1), 4)
      @:CHECK_BOUNDS(SIZE(y_ad, 2), this%n)

      ! Construct quasi-adiabatic eigenfunctions y_qad from adiabatic
      ! eigenfrequency omega_ad and eigenfunctions y_ad

      ! Copy over adiabatic eigenfunctions

      y_qad(1:4,:) = y_ad

      ! Evaluate components of the non-adiabatic RHS matrix
      ! corresponding to the energy conservation and transport equations

      !$OMP PARALLEL DO PRIVATE (xA)
      do j = 1, this%n

         xA = this%eq%xA(j, st)

         xA_5(:,j) = xA(5,:)
         xA_6(:,j) = xA(6,:)

      end do

      ! Evaluate the luminosity perturbation eigenfunction

      where (this%gr%pt%x /= 0._RD)
         y_qad(6,:) = -(xA_5(1,:)*y_qad(1,:) + xA_5(2,:)*y_qad(2,:) + xA_5(3,:)*y_qad(3,:) + xA_5(4,:)*y_qad(4,:))/xA_5(6,:)
      elsewhere
         y_qad(6,:) = 0._RD
      end where

      ! Evaluate the gradient of the luminosity perturbation
      ! eigenfunction, segment-by-segment

      seg_loop : do s = this%gr%s_i(), this%gr%s_o()
         associate (j_i => this%gr%j_s_i(s), j_o => this%gr%j_s_o(s))
            dy_6(j_i:j_o) = this%gr%pt(j_i:j_o)%x*deriv(this%gr%pt(j_i:j_o)%x, REAL(y_qad(6,j_i:j_o), RD), 'MONO')
         end associate
      end do seg_loop

      ! Evaluate the entropy perturbation eigenfunction

      where (this%gr%pt%x /= 0._RD)
         y_qad(5,:) = (dy_6 - (xA_6(1,:)*y_qad(1,:) + xA_6(2,:)*y_qad(2,:) + xA_6(3,:)*y_qad(3,:) + &
            xA_6(4,:)*y_qad(4,:) + xA_6(6,:)*y_qad(6,:)))/xA_6(5,:)
      elsewhere
         y_qad(5,:) = 0._RD
      end where

      ! Finish

      return

   end function y_qad

end module qad_eval_m
