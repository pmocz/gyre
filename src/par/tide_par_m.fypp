! Module  : tide_par_m
! Purpose : tidal parameters
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module tide_par_m

   ! Uses

   use forum_m, only: RD

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: tide_par_t
      real(RD)      :: y_T_thresh_abs = 0._RD
      real(RD)      :: y_T_thresh_rel = 0._RD
      real(RD)      :: omega_c_thresh = 0._RD
      real(RD)      :: alpha_frq = 1._RD
      integer       :: l_min = 2
      integer       :: l_max = 4
      integer       :: m_min = -HUGE(0)
      integer       :: m_max = HUGE(0)
      integer       :: k_min = -10
      integer       :: k_max = 10
      character(64) :: tag = ''
   end type tide_par_t

   ! Access specifiers

   public :: tide_par_t
   public :: read_tide_par

   ! Default access

   private

contains

   subroutine read_tide_par(unit, td_p)

      integer, intent(in)                        :: unit
      type(tide_par_t), allocatable, intent(out) :: td_p(:)

      integer                  :: n_td_p
      integer                  :: i
      real(RD)                 :: y_T_thresh_abs
      real(RD)                 :: y_T_thresh_rel
      real(RD)                 :: omega_c_thresh
      real(RD)                 :: alpha_frq
      integer                  :: l_min
      integer                  :: l_max
      integer                  :: m_min
      integer                  :: m_max
      integer                  :: k_min
      integer                  :: k_max
      character(LEN(td_p%tag)) :: tag

      namelist /tide/ y_T_thresh_abs, y_T_thresh_rel, omega_c_thresh, alpha_frq, &
         l_min, l_max, m_min, m_max, k_min, k_max, tag

      ! Count the number of tide namelists

      rewind(unit)

      n_td_p = 0

      count_loop : do
         read(unit, NML=tide, END=100)
         n_td_p = n_td_p + 1
      end do count_loop

100   continue

      ! Read tide parameters

      rewind(unit)

      allocate(td_p(n_td_p))

      read_loop : do i = 1,n_td_p

         ! Set default values

         td_p(i) = tide_par_t()

         y_T_thresh_abs = td_p(i)%y_T_thresh_abs
         y_T_thresh_rel = td_p(i)%y_T_thresh_rel
         omega_c_thresh = td_p(i)%omega_c_thresh
         alpha_frq = td_p(i)%alpha_frq

         l_min = td_p(i)%l_min
         l_max = td_p(i)%l_max
         m_min = td_p(i)%m_min
         m_max = td_p(i)%m_max
         k_min = td_p(i)%k_min
         k_max = td_p(i)%k_max

         tag = td_p(i)%tag

         ! Read the namelist

         read(unit, NML=tide)

         ! Store read values

         td_p(i)%y_T_thresh_abs = y_T_thresh_abs
         td_p(i)%y_T_thresh_rel = y_T_thresh_rel
         td_p(i)%omega_c_thresh = omega_c_thresh
         td_p(i)%alpha_frq = alpha_frq

         td_p(i)%l_min = l_min
         td_p(i)%l_max = l_max
         td_p(i)%m_min = m_min
         td_p(i)%m_max = m_max
         td_p(i)%k_min = k_min
         td_p(i)%k_max = k_max

         td_p(i)%tag = tag

      end do read_loop

      ! Finish

      return

   end subroutine read_tide_par

end module tide_par_m
