! Module  : model_par_m
! Purpose : model parameters
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module model_par_m

   ! Uses

   use forum_m, only: RD

   use constants_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: model_par_t
      real(RD)                :: theta_s = 0._RD
      real(RD)                :: Gamma_1 = 5._RD/3._RD
      real(RD)                :: dx_snap = 0._RD
      real(RD)                :: x_i = 0._RD
      real(RD)                :: x_o = 1._RD
      real(RD)                :: s = 1._RD
      real(RD)                :: beta_m = 1._RD
      real(RD)                :: beta_p = 1._RD
      real(RD)                :: x_match = 0.5_RD
      character(256)          :: model_type = 'HOM'
      character(256)          :: grid_type = 'UNI'
      character(256)          :: file_format = ''
      character(256)          :: data_format = ''
      character(256)          :: interp_type = 'CUBIC'
      character(256)          :: deriv_type = 'MONO'
      character(FILENAME_LEN) :: file = ''
      integer                 :: n = 10
      logical                 :: add_center = .TRUE.
      logical                 :: repair_As = .FALSE.
      logical                 :: constrain_derivs = .TRUE.
      logical                 :: force_linear = .FALSE.
      logical                 :: resolve_match = .TRUE.
      logical                 :: use_nabla_rad = .FALSE.
   end type model_par_t

   ! Access specifiers

   public :: model_par_t
   public :: read_model_par

   ! Default access

   private

contains

   subroutine read_model_par(unit, ml_p)

      integer, intent(in)            :: unit
      type(model_par_t), intent(out) :: ml_p

      integer                          :: n_ml_p
      real(RD)                         :: theta_s
      real(RD)                         :: Gamma_1
      real(RD)                         :: dx_snap
      real(RD)                         :: x_i
      real(RD)                         :: x_o
      real(RD)                         :: s
      real(RD)                         :: beta_m
      real(RD)                         :: beta_p
      real(RD)                         :: x_match
      character(LEN(ml_p%model_type))  :: model_type
      character(LEN(ml_p%grid_type))   :: grid_type
      character(LEN(ml_p%file_format)) :: file_format
      character(LEN(ml_p%data_format)) :: data_format
      character(LEN(ml_p%deriv_type))  :: interp_type
      character(LEN(ml_p%deriv_type))  :: deriv_type
      character(LEN(ml_p%file))        :: file
      integer                          :: n
      logical                          :: add_center
      logical                          :: repair_As
      logical                          :: constrain_derivs
      logical                          :: force_linear
      logical                          :: resolve_match
      logical                          :: use_nabla_rad

      namelist /model/ theta_s, Gamma_1, dx_snap, x_i, x_o, s&
         &, beta_m, beta_p, x_match, model_type, grid_type, file_format,&
         & data_format, interp_type, deriv_type, file, n, add_center, &
         & repair_As, constrain_derivs, force_linear, resolve_match, &
         & use_nabla_rad

      ! Count the number of model namelists

      rewind(unit)

      n_ml_p = 0

      count_loop : do
         read(unit, NML=model, END=100)
         n_ml_p = n_ml_p + 1
      end do count_loop

100   continue

      @:ASSERT(n_ml_p == 1, 'input file should contain exactly one &model namelist')

      ! Read model parameters

      rewind(unit)

      ! Set default values

      ml_p = model_par_t()

      theta_s = ml_p%theta_s
      Gamma_1 = ml_p%Gamma_1
      dx_snap = ml_p%dx_snap
      x_i = ml_p%x_i
      x_o = ml_p%x_o
      s = ml_p%s
      beta_m = ml_p%beta_m
      beta_p = ml_p%beta_p
      x_match = ml_p%x_match
      model_type = ml_p%model_type
      grid_type = ml_p%grid_type
      file_format = ml_p%file_format
      data_format = ml_p%data_format
      interp_type = ml_p%interp_type
      deriv_type = ml_p%deriv_type
      file = ml_p%file
      n = ml_p%n
      add_center = ml_p%add_center
      repair_As = ml_p%repair_As
      constrain_derivs = ml_p%constrain_derivs
      force_linear = ml_p%force_linear
      resolve_match = ml_p%resolve_match
      use_nabla_rad = ml_p%use_nabla_rad

      ! Read the namelist

      read(unit, NML=model)

      ! Store read values

      ml_p%theta_s = theta_s
      ml_p%Gamma_1 = Gamma_1
      ml_p%dx_snap = dx_snap
      ml_p%x_i = x_i
      ml_p%x_o = x_o
      ml_p%s = s
      ml_p%beta_m = beta_m
      ml_p%beta_p = beta_p
      ml_p%x_match = x_match
      ml_p%model_type = model_type
      ml_p%grid_type = grid_type
      ml_p%file_format = file_format
      ml_p%data_format = data_format
      ml_p%interp_type = interp_type
      ml_p%deriv_type = deriv_type
      ml_p%file = file
      ml_p%n = n
      ml_p%add_center = add_center
      ml_p%repair_As = repair_As
      ml_p%constrain_derivs = constrain_derivs
      ml_p%force_linear = force_linear
      ml_p%resolve_match = resolve_match
      ml_p%use_nabla_rad = use_nabla_rad

      ! Finish

      return

   end subroutine read_model_par

end module model_par_m
