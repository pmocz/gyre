! Module  : atmos_m
! Purpose : atmosphere utility routines
!
! Copyright 2013-2025 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module atmos_m

   ! Uses

   use forum_m, only: RD

   use point_m
   use math_m
   use model_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Interfaces

   #:for S in FLOAT_SUFFIXES

      interface atmos_chi
         module procedure atmos_chi_${S}$_
      end interface atmos_chi

   #:endfor

   ! Access specifiers

   public :: atmos_chi
   public :: eval_atmos_cutoff_freqs
   public :: eval_atmos_coeffs_unno
   public :: eval_atmos_coeffs_isothrm

   ! Default access

   private

contains

   function atmos_chi_r_(V, As, c_1, Gamma_1, alpha_omg, omega, lambda) result(chi)

      real(RD), intent(in) :: V
      real(RD), intent(in) :: As
      real(RD), intent(in) :: c_1
      real(RD), intent(in) :: Gamma_1
      real(RD), intent(in) :: alpha_omg
      real(RD), intent(in) :: omega
      real(RD), intent(in) :: lambda
      real(RD)             :: chi

      real(RD)      :: a_11
      real(RD)      :: a_12
      real(RD)      :: a_21
      real(RD)      :: a_22
      real(RD)      :: b
      real(RD)      :: c
      real(RD)      :: psi2
      logical, save :: warned = .FALSE.

      ! Calculate the atmospheric radial wavenumber (real frequencies)

      a_11 = V/Gamma_1 - 3._RD
      a_12 = lambda/(c_1*alpha_omg*omega**2) - V/Gamma_1
      a_21 = c_1*alpha_omg*omega**2 - As
      a_22 = As + 1._RD

      b = -(a_11 + a_22)
      c = a_11*a_22 - a_12*a_21

      psi2 = b**2 - 4._RD*c

      if (psi2 < 0._RD) then

         if (.NOT. warned) then
            @:WARN('Discarding imaginary part of atmospheric radial wavenumber')
            warned = .TRUE.
         endif

         chi = -b/2._RD

      else

         if (b >= 0._RD) then
            chi = (- b - sqrt(psi2))/2._RD
         else
            chi = 2._RD*c/(- b + sqrt(psi2))
         endif

      endif

      ! Finish

      return

   end function atmos_chi_r_

   !****

   function atmos_chi_c_(V, As, c_1, Gamma_1, alpha_omg, omega, lambda, branch) result(chi)

      real(RD), intent(in)     :: V
      real(RD), intent(in)     :: As
      real(RD), intent(in)     :: c_1
      real(RD), intent(in)     :: Gamma_1
      real(RD), intent(in)     :: alpha_omg
      complex(RD), intent(in)  :: omega
      complex(RD), intent(in)  :: lambda
      character(*), intent(in) :: branch
      complex(RD)              :: chi

      complex(RD) :: a_11
      complex(RD) :: a_12
      complex(RD) :: a_21
      complex(RD) :: a_22
      complex(RD) :: b
      complex(RD) :: c
      complex(RD) :: psi2
      complex(RD) :: psi

      ! Calculate the atmospheric radial wavenumber (complex frequencies)

      a_11 = V/Gamma_1 - 3._RD
      a_12 = lambda/(c_1*alpha_omg*omega**2) - V/Gamma_1
      a_21 = c_1*alpha_omg*omega**2 - As
      a_22 = As + 1._RD

      b = -(a_11 + a_22)
      c = a_11*a_22 - a_12*a_21

      psi2 = b**2 - 4._RD*c
      psi = sqrt(psi2)

      ! Adjust the sign of psi to choose the correct solution branch

      select case (branch)

      case ('E_POS')

         ! Outwardly-growing energy density

         if (REAL(psi) < 0._RD) psi = -psi

      case ('E_NEG')

         ! Outwardly-decaying energy density

         if (REAL(psi) > 0._RD) psi = -psi

      case ('F_POS')

         ! Outward energy flux

         if (AIMAG((psi - a_11)*CONJG(omega)) < 0._RD) psi = -psi

      case ('F_NEG')

         ! Inward energy flux

         if (AIMAG((psi - a_11)*CONJG(omega)) > 0._RD) psi = -psi

      case ('V_POS')

         ! Outward phase velocity

         if (AIMAG(psi)/REAL(omega) < 0._RD) psi = -psi

      case ('V_NEG')

         ! Inward phase velocity

         if (AIMAG(psi)/REAL(omega) > 0._RD) psi = -psi

      case default

         @:ABORT('Invalid branch')

      end select

      ! Set up chi

      if (SIGN(1._RD, REAL(psi)) == SIGN(1._RD, REAL(b))) then

         chi = -2._RD*c/(b + psi)

      else

         chi = (- b + psi)/2._RD

      endif

      ! Finish

      return

   end function atmos_chi_c_

   !****

   subroutine eval_atmos_cutoff_freqs(V, As, c_1, Gamma_1, lambda, omega_cutoff_lo, omega_cutoff_hi)

      real(RD), intent(in)  :: V
      real(RD), intent(in)  :: As
      real(RD), intent(in)  :: c_1
      real(RD), intent(in)  :: Gamma_1
      real(RD), intent(in)  :: lambda
      real(RD), intent(out) :: omega_cutoff_lo
      real(RD), intent(out) :: omega_cutoff_hi

      real(RD) :: a
      real(RD) :: b
      real(RD) :: c

      ! Evaluate the atmospheric cutoff frequencies from the supplied coefficients

      a = -4._RD*V/Gamma_1*c_1**2
      b = ((As - V/Gamma_1 + 4._RD)**2 + 4._RD*V/Gamma_1*As + 4._RD*lambda)*c_1
      c = -4._RD*lambda*As

      omega_cutoff_lo = sqrt((-b + sqrt(b**2 - 4._RD*a*c))/(2._RD*a))
      omega_cutoff_hi = sqrt((-b - sqrt(b**2 - 4._RD*a*c))/(2._RD*a))

      @:ASSERT(omega_cutoff_hi >= omega_cutoff_lo, 'Incorrect cutoff frequency ordering')

      ! Finish

      return

   end subroutine eval_atmos_cutoff_freqs

   !****

   subroutine eval_atmos_coeffs_unno(ml, pt, V, As, c_1, Gamma_1)

      class(model_t), intent(in) :: ml
      type(point_t), intent(in)  :: pt
      real(RD), intent(out)      :: V
      real(RD), intent(out)      :: As
      real(RD), intent(out)      :: c_1
      real(RD), intent(out)      :: Gamma_1

      ! Evaluate atmosphere coefficients ([Unn1989] formulation)

      V = ml%coeff(I_V_2, pt)*pt%x**2
      As = ml%coeff(I_AS, pt)
      c_1 = ml%coeff(I_C_1, pt)
      Gamma_1 = ml%coeff(I_GAMMA_1, pt)

      ! Finish

      return

   end subroutine eval_atmos_coeffs_unno

   !****

   subroutine eval_atmos_coeffs_isothrm(ml, pt, V, As, c_1, Gamma_1)

      class(model_t), intent(in) :: ml
      type(point_t), intent(in)  :: pt
      real(RD), intent(out)      :: V
      real(RD), intent(out)      :: As
      real(RD), intent(out)      :: c_1
      real(RD), intent(out)      :: Gamma_1

      ! Evaluate atmosphere coefficients for an isothermal, massless
      ! atmosphere

      V = ml%coeff(I_V_2, pt)*pt%x**2
      As = ml%coeff(I_V_2, pt)*pt%x**2*(1._RD-1._RD/ml%coeff(I_GAMMA_1, pt))
      c_1 = ml%coeff(I_C_1, pt)
      Gamma_1 = ml%coeff(I_GAMMA_1, pt)

      ! Finish

      return

   end subroutine eval_atmos_coeffs_isothrm

end module atmos_m
