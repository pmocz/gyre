! Module  : freq_context_m
! Purpose : frequency transformation routines (context-dependent)
!
! Copyright 2015-2020 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module freq_context_m

   ! Uses

   use forum_m, only: RD

   use atmos_m
   use constants_m
   use context_m
   use evol_model_m
   use freq_m
   use math_m
   use model_m
   use mode_par_m
   use osc_par_m
   use point_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Interfaces

   interface freq_scale
      module procedure freq_scale_context_
   end interface freq_scale

   interface freq_shift
      module procedure freq_shift_context_
   end interface freq_shift

   ! Access specifiers

   public :: freq_scale
   public :: freq_shift

   ! Default access

   private

contains

   function freq_scale_context_(units, cx, md_p, os_p) result(scale)

      character(*), intent(in)     :: units
      class(context_t), intent(in) :: cx
      type(mode_par_t), intent(in) :: md_p
      type(osc_par_t), intent(in)  :: os_p
      real(RD)                     :: scale

      class(model_t), pointer :: ml => null()
      type(point_t)           :: pt_i
      type(point_t)           :: pt_o

      ! Evaluate the multiplicative scale for converting dimensionless
      ! angular frequencies to dimensioned frequencies (as specified by
      ! units)

      ml => cx%model()

      pt_i = cx%point_i()
      pt_o = cx%point_o()

      select case (units)
      case ('ACOUSTIC_DELTA')
         scale = 1._RD/(TWOPI*ml%Delta_p(pt_i%x, pt_o%x))
      case ('GRAVITY_DELTA')
         scale = 1._RD/(TWOPI*ml%Delta_g(pt_i%x, pt_o%x, md_p%l*(md_p%l+1._RD)))
      case ('UPPER_DELTA')
         scale = 1._RD/(TWOPI*MAX(ml%Delta_p(pt_i%x, pt_o%x), ml%Delta_g(pt_i%x, pt_o%x, md_p%l*(md_p%l+1._RD))))
      case ('LOWER_DELTA')
         scale = 1._RD/(TWOPI*MIN(ml%Delta_p(pt_i%x, pt_o%x), ml%Delta_g(pt_i%x, pt_o%x, md_p%l*(md_p%l+1._RD))))
      case ('ROSSBY_I')
         scale = -md_p%l*(md_p%l+1)/(2._RD*md_p%m*cx%Omega_rot(pt_i))
      case ('ROSSBY_O')
         scale = -md_p%l*(md_p%l+1)/(2._RD*md_p%m*cx%Omega_rot(pt_o))
      case default
         select type (ml)
         class is (evol_model_t)
            scale = freq_scale_evol_context_(units, ml, pt_o, md_p, os_p)
         class default
            scale = freq_scale(units, ml)
         end select
      end select

      ! Finish

      return

   end function freq_scale_context_

   !****

   function freq_scale_evol_context_(units, ml, pt, md_p, os_p) result(scale)

      character(*), intent(in)       :: units
      type(evol_model_t), intent(in) :: ml
      type(point_t), intent(in)      :: pt
      type(mode_par_t), intent(in)   :: md_p
      type(osc_par_t), intent(in)    :: os_p
      real(RD)                       :: scale

      real(RD) :: omega_cutoff_lo
      real(RD) :: omega_cutoff_hi

      select case (units)
      case ('ACOUSTIC_CUTOFF')
         call eval_cutoff_freqs(ml, pt, md_p, os_p, omega_cutoff_lo, omega_cutoff_hi)
         scale = 1._RD/omega_cutoff_hi
      case ('GRAVITY_CUTOFF')
         call eval_cutoff_freqs(ml, pt, md_p, os_p, omega_cutoff_lo, omega_cutoff_hi)
         scale = 1._RD/omega_cutoff_lo
      case default
         scale = freq_scale(units, ml)
      end select

      ! Finish

      return

   end function freq_scale_evol_context_

   !****

   function freq_shift_context_(frame, cx, md_p) result(shift)

      character(*), intent(in)     :: frame
      class(context_t), intent(in) :: cx
      type(mode_par_t), intent(in) :: md_p
      real(RD)                     :: shift

      type(point_t) :: pt_i
      type(point_t) :: pt_o

      ! Evaluate the additive shift for converting dimensionless angular
      ! frequencies from the inertial frame to a co-rotating frame (as
      ! specified by frame)

      pt_i = cx%point_i()
      pt_o = cx%point_o()

      select case (frame)
      case ('INERTIAL')
         shift = 0._RD
      case ('COROT_I')
         shift = -md_p%m*cx%Omega_rot(pt_i)
      case ('COROT_O')
         shift = -md_p%m*cx%Omega_rot(pt_i)
      case default
         @:ABORT('Invalid frequency frame')
      end select

      ! Finish

      return

   end function freq_shift_context_

   !****

   subroutine eval_cutoff_freqs(ml, pt, md_p, os_p, omega_cutoff_lo, omega_cutoff_hi)

      class(model_t), intent(in)   :: ml
      type(point_t), intent(in)    :: pt
      type(mode_par_t), intent(in) :: md_p
      type(osc_par_t), intent(in)  :: os_p
      real(RD), intent(out)        :: omega_cutoff_lo
      real(RD), intent(out)        :: omega_cutoff_hi

      character(LEN(os_p%outer_bound)) :: outer_bound
      real(RD)                         :: V
      real(RD)                         :: As
      real(RD)                         :: c_1
      real(RD)                         :: Gamma_1
      logical, save                    :: warned = .FALSE.

      ! Evaluate the cutoff frequencies

      if (os_p%outer_bound_cutoff /= '') then
         outer_bound = os_p%outer_bound_cutoff
      else
         outer_bound = os_p%outer_bound
      endif

      select case (outer_bound)

      case ('VACUUM')

         @:ABORT('Cutoff frequencies cannot be evaluated for VACUUM outer boundary condition')

      case ('DZIEM')

         @:ABORT('Cutoff frequencies cannot be evaluated for DZIEM outer boundary condition')

      case ('ISOTHERMAL')

         call eval_atmos_coeffs_isothrm(ml, pt, V, As, c_1, Gamma_1)
         call eval_atmos_cutoff_freqs(V, As, c_1, Gamma_1, md_p%l*(md_p%l+1._RD), omega_cutoff_lo, omega_cutoff_hi)

      case ('UNNO')

         call eval_atmos_coeffs_unno(ml, pt, V, As, c_1, Gamma_1)
         call eval_atmos_cutoff_freqs(V, As, c_1, Gamma_1, md_p%l*(md_p%l+1._RD), omega_cutoff_lo, omega_cutoff_hi)

      case ('JCD')

         call eval_atmos_coeffs_isothrm(ml, pt, V, As, c_1, Gamma_1)
         call eval_atmos_cutoff_freqs(V, As, c_1, Gamma_1, md_p%l*(md_p%l+1._RD), omega_cutoff_lo, omega_cutoff_hi)

      case default

         @:ABORT('Invalid outer_bound')

      end select

      if (.not. warned) then
         @:WARN('WARNING: cutoff frequencies do not account for rotation effects')
         warned = .TRUE.
      endif

      ! Finish

      return

   end subroutine eval_cutoff_freqs

end module freq_context_m
